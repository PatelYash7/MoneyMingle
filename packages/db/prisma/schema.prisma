generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserBank {
  id            String    @id @default(uuid())
  bankingName   String    @unique
  password      String
  name          String
  Amount        String    @default("200000")
  walletId      String    @unique
  wallet        User      @relation(fields: [walletId],references: [id])
}

model User {
  id                String              @id @default(uuid()) //PK
  email             String?             @unique
  name              String?
  number            String              @unique
  password          String
  OnRampTransaction OnRampTransaction[] //relation field
  Balance           Balance?
  sentTransfers     p2pTransfer[]       @relation(name: "FromUserRelation")
  receivedTransfers p2pTransfer[]       @relation(name: "ToUserRelation")
  wallet            UserBank?           
}

model p2pTransfer {
  id             String   @id @default(uuid())
  amount         Int
  timestamp      DateTime
  SenderUserId   String
  SenderUser     User     @relation(name: "FromUserRelation", fields: [SenderUserId], references: [id])
  ReceiverUserId String
  ReceiverUser   User     @relation(name: "ToUserRelation", fields: [ReceiverUserId], references: [id])
}

model Merchant {
  id       String   @id @default(uuid())
  email    String   @unique
  name     String?
  authType AuthType
}

model OnRampTransaction {
  id        String       @id @default(uuid())
  status    OnRampStatus
  token     String       @unique
  provider  String
  amount    Int
  startTime DateTime
  user      User         @relation(fields: [userId], references: [id]) //relation fields
  userId    String //foreign key
}

enum OnRampStatus {
  SUCCESS
  PROCESSING
  FAILED
}

model Balance {
  id     String @id @default(uuid())
  userId String @unique
  amount Int?   @default(0)
  locked Int?   @default(0)
  user   User   @relation(fields: [userId], references: [id])
}

enum AuthType {
  Google
  Github
}
